// <auto-generated />
using System;
using Core.Infrastructure.Persistence.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241023174316_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CVPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("Seniority")
                        .HasColumnType("int");

                    b.Property<int>("StackPosition")
                        .HasColumnType("int");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CVPath = "/uploads/john_doe_cv.pdf",
                            CreatedDate = new DateTime(2024, 10, 23, 17, 43, 14, 792, DateTimeKind.Utc).AddTicks(6761),
                            DateOfBirth = new DateOnly(1990, 5, 15),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Note = "Candidate shows strong skills in backend development.",
                            Rating = 4,
                            Seniority = 3,
                            StackPosition = 1,
                            Uid = new Guid("b6ecd90f-6b11-4956-a78b-85d9d9394a61")
                        },
                        new
                        {
                            Id = 2,
                            CVPath = "/uploads/alice_smith_cv.pdf",
                            CreatedDate = new DateTime(2024, 10, 23, 17, 43, 14, 792, DateTimeKind.Utc).AddTicks(6805),
                            DateOfBirth = new DateOnly(1985, 12, 30),
                            Email = "alice.smith@example.com",
                            FirstName = "Alice",
                            LastName = "Smith",
                            Note = "Experienced project manager with a strong background in Agile methodologies.",
                            Rating = 5,
                            Seniority = 3,
                            StackPosition = 2,
                            Uid = new Guid("999c40ca-41d0-4692-a0ca-6bbc4a9d06b9")
                        },
                        new
                        {
                            Id = 3,
                            CVPath = "/uploads/michael_johnson_cv.pdf",
                            CreatedDate = new DateTime(2024, 10, 23, 17, 43, 14, 792, DateTimeKind.Utc).AddTicks(6842),
                            DateOfBirth = new DateOnly(1992, 4, 10),
                            Email = "michael.johnson@example.com",
                            FirstName = "Michael",
                            LastName = "Johnson",
                            Note = "Front-end developer with expertise in React and Vue.js.",
                            Rating = 3,
                            Seniority = 1,
                            StackPosition = 0,
                            Uid = new Guid("93e64d52-1135-4da1-92cc-aa2ee856c78d")
                        },
                        new
                        {
                            Id = 4,
                            CVPath = "/uploads/emma_williams_cv.pdf",
                            CreatedDate = new DateTime(2024, 10, 23, 17, 43, 14, 792, DateTimeKind.Utc).AddTicks(6847),
                            DateOfBirth = new DateOnly(1988, 8, 25),
                            Email = "emma.williams@example.com",
                            FirstName = "Emma",
                            LastName = "Williams",
                            Note = "Full-stack developer with strong skills in Node.js and .NET Core.",
                            Rating = 4,
                            Seniority = 1,
                            StackPosition = 2,
                            Uid = new Guid("be64a8f1-dc22-40f1-8f06-91dc3f08b27d")
                        },
                        new
                        {
                            Id = 5,
                            CVPath = "/uploads/david_brown_cv.pdf",
                            CreatedDate = new DateTime(2024, 10, 23, 17, 43, 14, 792, DateTimeKind.Utc).AddTicks(6849),
                            DateOfBirth = new DateOnly(1995, 11, 15),
                            Email = "david.brown@example.com",
                            FirstName = "David",
                            LastName = "Brown",
                            Note = "DevOps engineer with experience in CI/CD pipelines and containerization.",
                            Rating = 5,
                            Seniority = 2,
                            StackPosition = 4,
                            Uid = new Guid("d0b9eddd-398f-40d6-81cc-e440291cea55")
                        });
                });

            modelBuilder.Entity("Core.Domain.LeaveDistribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeUid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int>("RemainingDays")
                        .HasColumnType("int");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("LeaveDistributions");
                });

            modelBuilder.Entity("Core.Domain.LeaveRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RequestComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<string>("RequestingEmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("Core.Domain.LeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DefaultDays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("RequiresHRApproval")
                        .HasColumnType("bit");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LeaveTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 10, 23, 19, 43, 14, 792, DateTimeKind.Local).AddTicks(8258),
                            DefaultDays = 21,
                            Name = "Vacation",
                            RequiresHRApproval = true,
                            Uid = new Guid("b877bf7d-1082-4315-938e-40cf088d8bd4")
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 10, 23, 19, 43, 14, 792, DateTimeKind.Local).AddTicks(8405),
                            DefaultDays = 15,
                            Name = "Old Vacation",
                            RequiresHRApproval = true,
                            Uid = new Guid("33b34e7c-b931-49ba-a2c8-fcd048f0761e")
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 10, 23, 19, 43, 14, 792, DateTimeKind.Local).AddTicks(8410),
                            DefaultDays = 15,
                            Name = "Remote Work",
                            RequiresHRApproval = true,
                            Uid = new Guid("ac7ee7ec-c17d-4bb1-9d96-b9d85dac5e93")
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 10, 23, 19, 43, 14, 792, DateTimeKind.Local).AddTicks(8413),
                            DefaultDays = 365,
                            Name = "Sick Leave",
                            RequiresHRApproval = false,
                            Uid = new Guid("9e1efa33-afd5-45dc-8ca3-017a177989b2")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "995d5439-2b54-458a-b08d-e0f289255a96",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "ebc687e2-03df-4448-b79e-32e3e39de6bc",
                            Name = "Company Administrator",
                            NormalizedName = "COMPANY ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2ed7c2e3-d4ad-4222-9439-1700379ea772",
                            Name = "HR",
                            NormalizedName = "HR"
                        },
                        new
                        {
                            Id = "dd70f100-6753-494a-9382-1dd5ef51d4b6",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Core.Domain.LeaveDistribution", b =>
                {
                    b.HasOne("Core.Domain.LeaveType", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaveType");
                });

            modelBuilder.Entity("Core.Domain.LeaveRequest", b =>
                {
                    b.HasOne("Core.Domain.LeaveType", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.Domain.Common.DateRange", "Duration", b1 =>
                        {
                            b1.Property<int>("LeaveRequestId")
                                .HasColumnType("int");

                            b1.Property<DateOnly>("End")
                                .HasColumnType("date");

                            b1.Property<DateOnly>("Start")
                                .HasColumnType("date");

                            b1.HasKey("LeaveRequestId");

                            b1.ToTable("LeaveRequests");

                            b1.WithOwner()
                                .HasForeignKey("LeaveRequestId");
                        });

                    b.Navigation("Duration")
                        .IsRequired();

                    b.Navigation("LeaveType");
                });
#pragma warning restore 612, 618
        }
    }
}
